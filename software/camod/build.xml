<project name="caMOD" default="clean-build-compile" basedir=".">
    
    <property file="localbuild.properties" />
        
    <property file="build.properties" />

    <!-- stage specific attributes -->
    <!--filter filtersfile="${tier}_camod.properties" /-->
    <filter token="db.host" value="${db.host}"/>
    <filter token="db.port" value="${db.port}"/>
    <filter token="db.username" value="${db.username}"/>
    <filter token="db.password" value="${db.password}"/>
    <filter token="db.dbname" value="${db.dbname}"/>

	<echo>Building for stage: ${tier}</echo>
	
    <!-- DEFAULT BUILD, does everything -->    
    <target name="clean-build-compile" depends="build_war" /> 
    
    <!--
    TARGET: COMPILE
        Compiles the source directory
    -->
	<!-- Classpath to compile the junit tests -->
	<path id="test.compile.classpath">
		<pathelement location="${build.classes.dir}" />
		<fileset dir="${source.lib.dir}">
			<include name="**/*.jar"/>
		</fileset>
	</path>
    <target name="compile">
        <delete dir="${build.classes.dir}" />
        <mkdir dir="${build.classes.dir}" />
        <javac srcdir="${source.dir}" 
               destdir="${build.classes.dir}" 
               source="1.5" 
               debug="true" 
               debuglevel="lines,vars,source">
	         <classpath>
              <fileset dir="${source.lib.dir}">
                 <include name="*.jar"/>
               </fileset>
               <fileset dir="${source.nondeploy.lib.dir}">
                  <include name="*.jar"/>
                </fileset>
                <fileset dir="${source.nondeploy.lib.dir}">
                   <include name="*.jar"/>
                 </fileset>
                <fileset dir="${source.javamail.dir}">
                   <include name="*.jar"/>
                </fileset>	
         </classpath>
        </javac>
    </target>

    <target name="compile-unit-tests" depends="compile">
        <mkdir dir="${build.dir}/build"/>
        <javac srcdir="test" destdir="${build.dir}/build" source="1.5" 
               debug="true" debuglevel="lines,vars,source">
    	    <classpath refid="test.compile.classpath" />
        </javac>
    </target>
	
    <!-- Classpath to run the junit tests -->
    <path id="test.run.classpath">
    	<pathelement location="${source.dir}" />
          <pathelement location="${build.classes.dir}" />
          <pathelement location="${build.dir}/build" />
          <fileset dir="${source.lib.dir}">
                <include name="**/*.jar"/>
          </fileset>
          <fileset dir="/devtools/jboss-4.0.2/client">
                <include name="**/*.jar"/>
          </fileset>
    </path>

	<!-- Class to  run for the web http integration tests -->
	<property name="test.class.name" value="web.alltests.AllTests" />
	<target name="test-httpUnit">
	  <junit fork="yes" haltonfailure="yes">
	    <test name="${test.class.name}" />
	  	<formatter type="xml"/>
	  	<classpath refid="test.run.classpath" />
	  </junit>
	</target>

	<!-- add above classpath to print out to console
		formatter type="plain" usefile="false"/ -->

    <!--
        TARGET: copy_resource_directory
        Copies all the bundle resources to the WEB-INF/classes/ folder
    -->
    <target name="copy_resource_directory" depends="compile">
        <copy todir="${build.classes.dir}" filtering="true" >
            <fileset dir="${source.dir}">                                
                <include name="**/*.xml" />
                <include name="**/*.properties" />
                <include name="*.dtd" />
                <include name="*.xsd" />
            </fileset>
        	<!-- fileset dir="${source.properties.dir}">
                <include name="**/*.properties" />        		
            </fileset -->        		
        </copy>
    </target>

    <!-- =================================================================== -->
    <!-- The "db-prepare" target generates the database schema and creates   --> 
    <!-- tables based on the mapping files                                   -->
    <!-- =================================================================== -->
    <target name="process-files" description="processes parameter substiution for files">        
        
        <echo>process-files</echo>   
        
        <copy todir="${build.classes.dir}" filtering="true" >
            <fileset dir="${source.dir}">                                
                <include name="hibernate.cfg.xml" />
            </fileset>
            <!-- fileset dir="${source.properties.dir}">
                <include name="camod.properties" />
            </fileset -->
        </copy>
    	<move todir="${source.dir}">
            <fileset dir="${build.classes.dir}">                                
                <include name="hibernate.cfg.xml" />
                <include name="camod.properties" />
            </fileset>
    	</move>
        <copy todir="${source.dir}" filtering="true" >
            <fileset dir="${webinf.dir}">                                
            	<include name="struts-config.xml" />
            </fileset>
        </copy>
       	<move todir="${webinf.dir}">
            <fileset dir="${source.dir}">                                
            	<include name="struts-config.xml" />
            </fileset>
        </move>
    </target>
    <!--
        TARGET: build_war
        This will build the war file
    -->
    <target name="build_war" depends="copy_resource_directory">
        <mkdir dir="${build.dir}/build"/>
        <delete file="${build.dir}/${app.war.name}.war" />
    	<!--<delete file="${build.dir}/build/${app.war.name}.war" />-->    	
        <!--<war destfile="${build.dir}/build/${app.war.name}.war" -->
            <war destfile="${build.dir}/${app.war.name}.war"         	
             webxml="${webapp.dir}/WEB-INF/web.xml">
            <fileset file="${webapp.dir}/*.*" />
            <zipfileset dir="${webapp.dir}/common" prefix="common" />
            <zipfileset dir="${webapp.dir}/images" prefix="images" />
            <zipfileset dir="${webapp.dir}/scripts" prefix="scripts" />
            <zipfileset dir="${webapp.dir}/styles" prefix="styles" />
            <zipfileset dir="${webapp.dir}/config" prefix="config" />
            <zipfileset dir="${webapp.dir}/WebHelp" prefix="WebHelp" />
            <zipfileset dir="${webapp.dir}/jsp" prefix="jsp" />
        	<zipfileset dir="${webapp.dir}/js" prefix="js" />
            <webinf dir="${webapp.dir}/WEB-INF"/>
            <classes dir="${build.classes.dir}" />
        </war>
    </target>
	
    <!-- original copy of build_war before BDA automation
    <target name="build_war" depends="copy_resource_directory">
    -->
    	<!--<mkdir dir="${build.dir}"/>--> 
    	<!--<delete file="${build.dir}/${app.war.name}.war" />-->
    	<!--<delete file="${build.dir}/build/${app.war.name}.war" />-->    	
        <!--<war destfile="${build.dir}/build/${app.war.name}.war" -->
            <!--war destfile="${build.dir}/${app.war.name}.war"         	
             webxml="${webapp.dir}/WEB-INF/web.xml">
            <fileset file="${webapp.dir}/*.*" />
            <zipfileset dir="${webapp.dir}/common" prefix="common" />
            <zipfileset dir="${webapp.dir}/images" prefix="images" />
            <zipfileset dir="${webapp.dir}/scripts" prefix="scripts" />
            <zipfileset dir="${webapp.dir}/styles" prefix="styles" />
            <zipfileset dir="${webapp.dir}/config" prefix="config" />
            <zipfileset dir="${webapp.dir}/WebHelp" prefix="WebHelp" />
            <zipfileset dir="${webapp.dir}/jsp" prefix="jsp" />
        	<zipfileset dir="${webapp.dir}/js" prefix="js" />
            <webinf dir="${webapp.dir}/WEB-INF"/>
            <classes dir="${build.classes.dir}" />
        </war>
    </target-->
    
    <!-- Setup Hibernate Mappings -->

    <!-- import properties (app settings, classpath, jar file locations) -->
    <import file="properties.xml"/>
    
    <!-- =================================================================== -->
    <!-- The "db-prepare" target generates the database schema and creates   --> 
    <!-- tables based on the mapping files                                   -->
    <!-- =================================================================== -->
    <target name="setup-db" description="creates database tables">        
        
        <echo>db-prepare, schemaexport</echo>   
        
        <taskdef name="schemaexport"
            classname="org.hibernate.tool.hbm2ddl.SchemaExportTask">        
            <classpath>
                  <path refid="all.classpath"/> 
            </classpath> 
        </taskdef>
        
        <generate-database-properties/>
        <schemaexport quiet="no" text="no" drop="no" delimiter=";" 
            properties="database.properties" output="create-tables.sql">
            <fileset dir="${build.dir}/src/gov/nih/nci/camod/domain" 
                     includes="**/*.hbm.xml"/>            
        </schemaexport>
    </target>

    <!-- =================================================================== -->
    <!-- The Junit Ant   --> 
    <!-- =================================================================== -->
	
	<property name="tst-dir" location="test" />
	  <property name="TALK" value="true" />  <path id="classpath.base">
	  </path>

	  <path id="classpath.test">
	    <pathelement location="${junit.jar}" />
	    <pathelement location="${tst-dir}" />
	    <path refid="classpath.base" />
	  </path>
	
	  <target name="test" depends="compile-unit-tests">
	    <junit>
	      <classpath refid="classpath.test" />
	      <formatter type="brief" usefile="false" />
	      <test name="EditModelCharacteristicsTest" />
	    </junit>
	  </target>	
	
</project>
