<project name="caMOD" default="build_resources" basedir=".">
    
    <property file="localbuild.properties" />
        
    <property file="build.properties" />

    <!-- stage specific attributes -->
    <filter token="database.host" value="${database.host}"/>
    <filter token="database.port" value="${database.port}"/>
    <filter token="database.user" value="${database.user}"/>
    <filter token="database.password" value="${database.password}"/>
    <filter token="database.name" value="${database.name}"/>
    <filter token="database.url" value="${database.url}"/>
    <filter token="database.driver" value="${database.driver}"/>
    <filter token="common.resources.dir" value="${common.resources.dir}"/>
    <filter token="caimage.host" value="${caimage.host}"/>
    <filter token="caimage.modelview.uri" value="${caimage.modelview.uri}"/>
    <filter token="caimage.genconview.uri" value="${caimage.genconview.uri}"/>
    <filter token="ldap.url" value="${ldap.url}"/>
    <filter token="ldap.basedn" value="${ldap.basedn}"/>

	<echo>Building for stage: ${tier}</echo>
	
    <path id="liquibase.dependencies.path">
	<fileset dir="${basedir}/db/lib">
		<include name="liquibase-*.jar" />
		<include name="ojdbc14*.jar" />
		<include name="ant-contrib-1.0b3.jar" />
	</fileset>
	<pathelement path="${basedir}" />
    </path>

    <taskdef resource="liquibasetasks.properties">
	<classpath refid="liquibase.dependencies.path" />
    </taskdef>

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
	<classpath refid="liquibase.dependencies.path" />
    </taskdef>
	
	
    <!--
        TARGET: build_resources
        This will build the war file and copy the server.xml cleaned for session fixation
    -->	
    <target name="build_resources" depends="build_war">
    	<echo>************  ${common.resources.dir}</echo>
    	
    	<copy file="${log4j.file}" todir="${build.dir}"/>
    	<copy file="${ojdbc14.file}" todir="${build.dir}"/>
    	<copy file="${common.resources.dir}/mail.properties" todir="${build.dir}">
    	  <filterset>
	    <filter token="MAIL_SMTP_SERVER" value="${mail.smtp.server}"/>
	  </filterset>
	</copy>
    	<copy file="${common.resources.dir}/camod.properties" todir="${build.dir}">
    	  <filterset>
		    <filter token="CAIMAGE_HOST" value="${caimage.host}"/>
		    <filter token="CAIMAGE_MODELVIEW" value="${caimage.modelview.uri}"/>
		    <filter token="CAIMAGE_GENCONVIEW" value="${caimage.genconview.uri}"/>
    	  	<filter token="EVS_URI" value="${evs.uri}"/>
    	  	<filter token="USER_REGISTRATION_EMAIL" value="${user.registration.email}"/>
		  </filterset>
	</copy>
	
	<copy file="${common.resources.dir}/jboss-conf/login-config.xml" todir="${build.dir}">
	  <filterset>
	    <filter token="ldap.url" value="${ldap.url}"/>
	    <filter token="ldap.basedn" value="${ldap.basedn}"/>
	  </filterset>
	</copy>		
			
	<copy file="${common.resources.dir}/jboss-conf/properties-service.xml" todir="${build.dir}" />

    </target>	
    <!--
        TARGET: build_war
        This will build the war file
    -->
    <target name="build_war" depends="copy_resource_directory">
    	<delete dir="${build.dir}" />
        <mkdir dir="${build.dir}"/>
            <war destfile="${build.dir}/${app.war.name}.war"         	
             webxml="${webapp.dir}/WEB-INF/web.xml">
		    <fileset file="${webapp.dir}/*.*" />
		    <zipfileset dir="${webapp.dir}/common" prefix="common" />
		    <zipfileset dir="${webapp.dir}/images" prefix="images" />
		    <zipfileset dir="${webapp.dir}/scripts" prefix="scripts" />
		    <zipfileset dir="${webapp.dir}/styles" prefix="styles" />
		    <zipfileset dir="${webapp.dir}/config" prefix="config" />
		    <zipfileset dir="${webapp.dir}/WebHelp" prefix="WebHelp" />              	
		    <zipfileset dir="${webapp.dir}/jsp" prefix="jsp" />
		    <zipfileset dir="${webapp.dir}/js" prefix="js" />
		    <zipfileset dir="${webapp.dir}/html" prefix="html" />
            <zipfileset dir="${webapp.dir}/webtree" prefix="webtree" />
		    <webinf dir="${webapp.dir}/WEB-INF"/>
		    <classes dir="${build.classes.dir}" />
            </war>
    </target>

    <!--
        TARGET: copy_resource_directory
        Copies all the bundle resources to the WEB-INF/classes/ folder
    -->
    <target name="copy_resource_directory" depends="compile">
        <copy todir="${build.classes.dir}" filtering="true" >
            <fileset dir="${source.dir}">                                
                <include name="**/*.xml" />
                <include name="**/*.properties" />
                <include name="*.dtd" />
                <include name="*.xsd" />
            </fileset>
        	<!-- fileset dir="${source.properties.dir}">
                <include name="**/*.properties" />        		
            </fileset -->        		
        </copy>
    </target>	
	
    
    <!--
    TARGET: COMPILE
        Compiles the source directory
    -->
	<!-- Classpath to compile the junit tests -->
	<path id="test.compile.classpath">
		<pathelement location="${build.classes.dir}" />
		<fileset dir="${source.lib.dir}">
			<include name="**/*.jar"/>
		</fileset>
	</path>
    <target name="compile" >
        <delete dir="${build.classes.dir}" />
        <mkdir dir="${build.classes.dir}" />
        <javac srcdir="${source.dir}" 
               destdir="${build.classes.dir}" 
               source="1.5" 
               debug="true" 
               debuglevel="lines,vars,source">
	         <classpath>
              <fileset dir="${source.lib.dir}">
                 <include name="*.jar"/>
               </fileset>
               <fileset dir="${source.nondeploy.lib.dir}">
                  <include name="*.jar"/>
                </fileset>
                <fileset dir="${source.nondeploy.lib.dir}">
                   <include name="*.jar"/>
                 </fileset>
                <fileset dir="${source.javamail.dir}">
                   <include name="*.jar"/>
                </fileset>	
         </classpath>
        </javac>
    </target>	
	
    <!--
        TARGET: build_war
        This will build the war file
    -->
    <target name="build_local_war" depends="copy_resource_directory">  
    	<delete file="C:\devtools\jboss-4.0.2\server\default\work\jboss.web\localhost\camod" />
    	<delete file="C:\devtools\jboss-4.0.2\server\default\deploy\camod.war" />
        <delete file="${build.local.dir}/${app.war.name}.war" />
    	<delete dir="${build.local.dir}"/>
        <mkdir dir="${build.local.dir}"/>
        <war destfile="${build.local.dir}/${app.war.name}.war" 
             webxml="${webapp.dir}/WEB-INF/web.xml">
            <fileset file="${webapp.dir}/*.*" />
            <zipfileset dir="${webapp.dir}/common" prefix="common" />
            <zipfileset dir="${webapp.dir}/images" prefix="images" />
            <zipfileset dir="${webapp.dir}/scripts" prefix="scripts" />
            <zipfileset dir="${webapp.dir}/styles" prefix="styles" />
            <zipfileset dir="${webapp.dir}/config" prefix="config" />
            <zipfileset dir="${webapp.dir}/WebHelp" prefix="WebHelp" />           	
            <zipfileset dir="${webapp.dir}/jsp" prefix="jsp" />
        	<zipfileset dir="${webapp.dir}/js" prefix="js" />
            <webinf dir="${webapp.dir}/WEB-INF"/>
            <classes dir="${build.classes.dir}" />
        </war>
    	<copy file="C:\dev\workspace\camod\software\camod\build\camod.war" todir="C:\devtools\jboss-4.0.2\server\default\deploy" overwrite="true" />    			
    </target>
	
    <target name="compile-unit-tests" depends="compile">
        <mkdir dir="${build.dir}/build"/>
        <javac srcdir="test" destdir="${build.dir}/build" source="1.5" 
               debug="true" debuglevel="lines,vars,source">
    	    <classpath refid="test.compile.classpath" />
        </javac>
    </target>
	
    <!-- Classpath to run the junit tests -->
    <path id="test.run.classpath">
    	<pathelement location="${source.dir}" />
          <pathelement location="${build.classes.dir}" />
          <pathelement location="${build.dir}/build" />
          <fileset dir="${source.lib.dir}">
                <include name="**/*.jar"/>
          </fileset>
          <fileset dir="/devtools/jboss-4.0.2/client">
                <include name="**/*.jar"/>
          </fileset>
    </path>

	<!-- Class to  run for the web http integration tests -->
	<property name="test.class.name" value="web.alltests.AllTests" />
	<target name="test-httpUnit">
	  <junit fork="yes" haltonfailure="yes">
	    <test name="${test.class.name}" />
	  	<formatter type="xml"/>
	  	<classpath refid="test.run.classpath" />
	  </junit>
	</target>

	<!-- add above classpath to print out to console
		formatter type="plain" usefile="false"/ -->



    <!-- =================================================================== -->
    <!-- The "db-prepare" target generates the database schema and creates   --> 
    <!-- tables based on the mapping files                                   -->
    <!-- =================================================================== -->
    <target name="process-files" description="processes parameter substiution for files">        
        
        <echo>process-files</echo>   
        
        <copy todir="${build.classes.dir}" filtering="true" >
            <fileset dir="${source.dir}">                                
                <include name="hibernate.cfg.xml" />
            </fileset>
            <!-- fileset dir="${source.properties.dir}">
                <include name="camod.properties" />
            </fileset -->
        </copy>
    	<move todir="${source.dir}">
            <fileset dir="${build.classes.dir}">                                
                <include name="hibernate.cfg.xml" />
                <include name="camod.properties" />
            </fileset>
    	</move>
        <copy todir="${source.dir}" filtering="true" >
            <fileset dir="${webinf.dir}">                                
            	<include name="struts-config.xml" />
            </fileset>
        </copy>
       	<move todir="${webinf.dir}">
            <fileset dir="${source.dir}">                                
            	<include name="struts-config.xml" />
            </fileset>
        </move>
    </target>	
    
    <!-- Setup Hibernate Mappings -->

 
    <!-- =================================================================== -->
    <!-- The "db-prepare" target generates the database schema and creates   --> 
    <!-- tables based on the mapping files                                   -->
    <!-- =================================================================== -->
    <target name="setup-db" description="creates database tables">        
        
        <echo>db-prepare, schemaexport</echo>   
        
        <taskdef name="schemaexport"
            classname="org.hibernate.tool.hbm2ddl.SchemaExportTask">        
            <classpath>
                  <path refid="all.classpath"/> 
            </classpath> 
        </taskdef>
        
        <generate-database-properties/>
        <schemaexport quiet="no" text="no" drop="no" delimiter=";" 
            properties="database.properties" output="create-tables.sql">
            <fileset dir="${build.dir}/src/gov/nih/nci/camod/domain" 
                     includes="**/*.hbm.xml"/>            
        </schemaexport>
    </target>
    
    <target name="upgrade-db">
    	<echo>************  ${db.upgrade.file}</echo>
    	<echo>************  ${database.driver}</echo>
    	<echo>************  ${database.url}</echo>
    	<echo>************  ${database.user}</echo>
    	<echo>************  ${database.password}</echo>
	<updateDatabase changeLogFile="${db.upgrade.file}" driver="${database.driver}" url="${database.url}" username="${database.user}" password="${database.password}" dropFirst="false" classpathref="liquibase.dependencies.path" />
    </target>


    <!-- =================================================================== -->
    <!-- The Junit Ant   --> 
    <!-- =================================================================== -->
	
	<property name="tst-dir" location="test" />
	  <property name="TALK" value="true" />  <path id="classpath.base">
	  </path>

	  <path id="classpath.test">
	    <pathelement location="${junit.jar}" />
	    <pathelement location="${tst-dir}" />
	    <path refid="classpath.base" />
	  </path>
	
	  <target name="test" depends="compile-unit-tests">
	    <junit>
	      <classpath refid="classpath.test" />
	      <formatter type="brief" usefile="false" />
	      <test name="EditModelCharacteristicsTest" />
	    </junit>
	  </target>	
	
</project>
